# MapTables
MapTables is a standalone support add-on that is used to dynamically create and/or update information, reference, and/or 
cross-reference tables for each and every one of the Maps in the game world. Because it is a support add-on, it has been designed 
for use by developers rather than users.

WARNING: You must be running ESO game code for the Wrathstone API (100026), or greater, for this add-on to function correctly.
## What It Is
Because the game does not guarantee that the ordinal table positions of Map table entries accessed by a "Map Index" are static, the 
Map table entry that a Map Index points to in this version may not be the same Map table entry that it pointed to in the previous 
version or that it will point to in the next version. This is the primary reason why hard coded Map tables are such a time-
consuming pain to maintain.

To get around this problem, the game developers designed additional Maps tables whose ordinal table positions are static and named 
these indexes "Map Identifiers"; however, Map Identifiers are not the same as, and do not interchange well with, Map Indexes 
because identifiers differ from indexes in value, usage and purpose.

Recently, however, the game developers have provided sufficient information via game API return values to make implementation of a MapTables support add-on feasible; thus, MapTables uses these game API functions to create and maintain sets of Maps reference tables thereby eliminating the rather tedious and time-consuming manual updates required by hard coded reference tables.

MapTables creates its reference tables dynamically every time:
* the game changes its APIVersion number
* MapTables changes its AddOnVersion number
* MapTables detects missing or empty Maps tables
* the game adds new or deletes old maps

Otherwise, MapTables retrieves the most current reference tables from its saved variables file and then scans and updates these reference table entries for missing tables and/or table entries and automatically reloads those tables and/or entries.

"Standalone" means that MapTables should not be embedded. Please load only one instance of MapTables from your ".../Addons/" directory and append a "##DependsOn: MapTables" directive in your add-on's manifest file to instruct the game to verify that a MapTables process exists and is running before the game loads your add-on.

Do NOT embed a MapTables folder within your add-on!
## What It Does
MapTables uses Map Indexes and Map Identifiers to access its reference tables just like the game does. In fact, most if not all of the MapTables indexes and identifiers use the same values the game does. The difference is that MapTables creates several index to identifier and identifier to index cross-reference tables that are not visible to the add-on developer in the game's version 100026 API functions.
* A Map Index is the ordinal position of an entry in a Maps reference or cross-reference table. Index values may change whenever the game's APIVersion changes. Indexes are often used to access specific maps when the game needs to place objects, markers, icons, and/or subdivisions (i.e. zones, subzones, etc.) at x,y location coordinates. "mapIndex" is the variable name MapTables uses most often and the name is often shortened to "inx" or "mdx".
* A Map Identifier is the ordinal position of an entry in a Maps reference or cross-reference table. Identifier values do not change whenever the game's APIVersion changes. Identifiers are often used to access map content like textures, icons, widgets, or .dds files to enable the graphics engine to "draw" them on your monitor (See [Texture List](https://wiki.esoui.com/Texture_List) in the ESOUI wiki). "mapId" is the variable name MapTables uses most often and the name is often shortened to "id" or "mid".

Although Map Indexes and Map Identifiers may appear to be interchangeable, they are not because their values, purpose and usage differ and because they reference different tables for different reasons; however, what indexes and identifiers have in common, for example, is where the Map Index (1) for the Tamriel map refers to map data points, the Map Identifer (27) for the Tamriel map refers to the textures, icons, and .dds files for the Tamriel map. Think of it this way: identifiers reference tables that tell the game "what to draw"; indexes reference tables that tell the game "where to draw" them.

MapTables determines when to create its reference tables or when to update an existing set of reference tables based on these criteria; if a Saved Variables file (i.e. .../SavedVariables/LibMaps.lua) exists that contains MapTables reference and/or cross-reference tables information for this NA, EU, or PTS megaserver, then the tables in that Saved Variables file will be used unless...
1. The value returned from the GetAPIVersion() API function is not equal to the APIVersion value in the Saved Variables file; then, MapTables will create a new set of reference and/or cross-reference tables for every Map index the game returns to it.
2. The addonVersion value in the MapTables control entry (See the [AddonStub](https://github.com/Drakanwulf/AddonStub/wiki) wiki) is greater than the AddOnVersion value in the Saved Variables file; then, MapTables will create a new set of reference and/or cross-reference tables for every Map index the game returns to it.
3. The value returned from the GetNumMaps() API function is not equal to the numMaps value in the Saved Variables file; then, MapTables will create a new set of reference and/or cross-reference tables for every Map index the game returns to it.
4. Any reference or cross-reference table in the Saved Variables file is missing or is empty; then, MapTables will create a new set of reference and/or cross-reference tables for every Map index the game returns to it.

MapTables uses game API functions to automatically create and maintain reference and/or cross-reference tables for each and every Map in the game:
* It creates new or updates existing reference table entries by iterating through every Map index (e.g. 1 (Tamriel) through the current maximum number of Maps in the game (See the game GetNumMaps() API function).
* It creates new or updates existing reference tables for which the game API functions return information that the MapTables API functions require.
* It creates Information and Location reference tables for every Map.
* It creates Map Name to Map Index reference tables.
* It creates a Map Index to Zone Identifier cross-reference table.
* It creates Map Identifier to Map Name and Map Name to Map Identifier reference tables that the game API does not provide currently (as of 100026).
* It creates Map Index to Map Identifier and Map Identifier to Map Index cross-reference tables that the game does not provide currently (as of 100026).
## What It Needs
* MapTables uses the AddonStub support add-on to return an existing (i.e. duplicate) control entry or to create a control entry on MapTables' behalf.  Because MapTables is a standalone support add-on, its default actions have been coded to fail all older or duplicate versions of itself so these duplicates cannot continue to execute.
* MapTables needs the LibGPS2 library add-on and its dependent library add-ons (e.g. LibStub, LibMapPing, LibAddOnMenu-2.0, etc.) to generate and return global x, y location coordinates for the top left corner of each map according to its relative position within (or outside of) the Tamriel map.
## History:
MapTables has no ancestors. It is the result of our examining hard coded table data and the cooperation and assistance we received from other add-on authors who support the game. We would like to take this opportunity to thank them for their kindness and their efforts to assist us.
## API Functions:
MapTables does not duplicate existing game API functions like:
* Game API functions that use Map Indexes
    * GetCyrodiilMapIndex()
    * GetImperialCityMapIndex()
    * GetMapNameByIndex(*luaindex* _mapIndex_)
    * GetAutoMapNavigationCommonZoomOutMapIndex()
    * SetMapToMapListIndex(*luaindex* _index_) 
* Game API functions that use Map Identifiers
    * GetMapNumTilesForMapId(*integer* _mapId_)
    * GetMapTileTextureForMapId(*integer* _mapId_, *luaindex* _tileIndex_)
* Game API functions for retrieving Map identifiers, indexes, and names from the current Map
    * GetCurrentMapId()
    * GetCurrentMapIndex()
    * GetMapName()

MapTables uses the SetMapToMapListIndex(*luaindex* _index_) game API function to iterate through the game's list of active Maps.

Because the game handles the "Tamriel" and "The Aurbis" maps differently than it does other maps, it is possible for the MapTables API functions to return nil or zero (0) values because the corresponding Map values do not exist or they default to zero (invalid) values; however, please remember that 0,0 are valid defaults for the x,y location GPS coordinates of the top left corner of any Map. For those reasons, I believe you will find that some cross-reference tables are missing entries for indexes (1) and (24) (i.e. the Maps indexes for the "Tamriel" and "The Aurbis" maps).
### Definitions:
* MAJOR := Contains "MapTables", the addonName of this add-on enclosed in quotation marks.
* MINOR := Contains the AddOnVersion number for this add-on. _Note: This number must exist in the add-on code and it must be the same as the number in the AddOnVersion: directive in the manifest file; otherwise, the AddonStub support add-on will fail all attempts to start up a process for the MapTables add-on.
### MapTables:GetContentType( mapIndex: number )
#### Description:
Get the content type for this map. Content type defines what is in the Map.
#### Input:
mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
#### Returns:
nil := No values to return.

contentType := an index into a CONSTANTS table of Map Content definitions.
### MapTables:GetCoord( mapIndex: number )
#### Description:
Get the global x,y coordinates for this Map
#### Input:
mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
#### Returns:
nil := No values to return.

number, number := The global x,y location coordinates of the top left corner of this Map's position inside (or outside) of the Tamriel map.
### MapTables:GetIdByIndex( mapIndex: number )
#### Description:
Get the Map Identifier for this Map Index
#### Input:
mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
#### Returns:
nil := No values to return.

mapId := A positive number whose values range between 1 and ?. There appears to be no visible maximum value for MapId.
### MapTables:GetIdByName( mapName: string )
#### Description:
Get the Map Identifier for this Map Name
#### Input:
mapName := A string composed of case sensitive letters, numbers, and apostrophe characters (').
#### Returns:
nil := No values to return.

mapId := A positive number whose values range between 1 and ?. There appears to be no visible maximum value for MapId.
### MapTables:GetIndexByName( mapName: string )
#### Description:
Get the Map Index for this Map Name
#### Input:
mapName := A string composed of case sensitive letters, numbers, and apostrophe characters (').
#### Returns:
nil := No values to return.

mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
### MapTables:GetIndexById( mapId: number )
#### Description:
Get the Map Index for this Map Identifier
#### Input:
mapId := A positive number whose values range between 1 and ?. There appears to be no visible maximum value for MapId.
#### Returns:
nil := No values to return.

mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
### MapTables:GetMapType( mapIndex: number )
#### Description:
Get the map type for this Map. A map type is how you verify that a game table entry is a Map, a Zone, a Subzone, or something else.
#### Input:
mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
#### Returns:
nil := No values to return.

mapType := a numerical index into a CONSTANTS table that defines the type of map.
### MapTables:GetNameById( mapId: number )
#### Description:
Get the Map Name for this Map Identifier
#### Input:
mapId := A positive number whose values range between 1 and ?. There appears to be no visible maximum value for MapId.
#### Returns:
nil := No values to return.

mapName := A string composed of case sensitive letters, numbers, and apostrophe characters (').
### MapTables:GetZoneId( mapIndex: number )
#### Description:
Get the equivalent Zone Identifier for this Map
#### Input:
mapIndex := A positive number between 1 and numMaps (the maximum number of Maps in the World)
#### Returns:
nil := No values to return.

zoneId := A positive number whose values range between 1 and ?. There appears to be no visible maximum value for zoneId.
## Examples
This code snippet illustrates the interactions between MapTables, AddonStub, and the resultant MapTables error messages.
```
--[[--------------------------------------------------------------------------------------------------------------------------------
Same variables for AddonStub as for LibStub except MINOR must match the AddOnVersion number in the manifest.
----------------------------------------------------------------------------------------------------------------------------------]]
local MAJOR, MINOR = "MapTables", 100

--[[--------------------------------------------------------------------------------------------------------------------------------
Bootstrap code to either load or update this add-on.
----------------------------------------------------------------------------------------------------------------------------------]]
local addon, version
addon, version = AddonStub:Get( MAJOR )
if addon then
	assert( version < MINOR, "MapTables: This add-on is already loaded. Do NOT load MapTables multiple times!" )
end

addon, version = AddonStub:New( MAJOR, MINOR )
assert( addon, "MapTables: AddonStub failed to create a control entry!" )
--[[--------------------------------------------------------------------------------------------------------------------------------
... And MapTables initialization continues on from here...
----------------------------------------------------------------------------------------------------------------------------------]]
```
These code snippets illustrate the interactions between MapTables, LibStub(r5), LibGPS2, and the resultant MapTables error messages.
```
--[[--------------------------------------------------------------------------------------------------------------------------------
Obtain a local link to "LibGPS2" and define a measurements table for its use.
----------------------------------------------------------------------------------------------------------------------------------]]
local GPS = LibStub:GetLibrary( "LibGPS2", SILENT )
assert( GPS, "MapTables: LibStub refused to create a link to LibGPS2!" )

local measurement = {
	scaleX = 0,
	scaleY = 0,
	offsetX = 0,
	offsetY = 0,
	mapIndex = 0,
	zoneIndex = 0,
}
```
```
	-- Wait for a player to become active; LibGPS2 needs this
	EVENT_MANAGER:RegisterForEvent( MAJOR, EVENT_PLAYER_ACTIVATED,
		function( event, initial )
			EVENT_MANAGER:UnregisterForEvent( MAJOR, EVENT_PLAYER_ACTIVATED )
		end
	)
	assert( GPS:IsReady(), "MapTables: LibGPS2 cannot function until a player is active!" )
```
